package se.lexicon.order.component.entity;

import com.gigaspaces.annotation.pojo.SpaceClass;
import com.gigaspaces.annotation.pojo.SpaceId;
import com.gigaspaces.annotation.pojo.SpaceRouting;
import com.so4it.annotation.Allowed;
import com.so4it.common.util.object.Required;
import com.so4it.component.entity.AbstractEntityBuilder;
import com.so4it.component.entity.IdEntity;
import se.lexicon.order.component.domain.Money;
import se.lexicon.order.component.domain.Side;

import java.math.BigDecimal;
import java.time.Instant;

@SpaceClass
public class OrderEntity extends IdEntity<String> {

    @Allowed(value = "Auto generated by GS",types = {Allowed.Type.NULLABLE})
    private String id;
    private String ssn;
    private BigDecimal amount;

    // Original
    private String instrument;
    private Money minMaxValue;
    private Instant insertionTimestamp;
    private Side side;

    private Integer noOfItemsToMatch;
    private Boolean allItemsMatched;

    private OrderEntity(){

    }

    private OrderEntity(Builder builder){
        this.id=builder.id;
        this.ssn= Required.notNull(builder.ssn,"ssn",builder.isTemplate());
        this.amount= Required.notNull(builder.amount,"amount",builder.isTemplate());
        this.instrument= Required.notNull(builder.instrument,"instrument",builder.isTemplate());
        this.minMaxValue= Required.notNull(builder.minMaxValue,"minMaxValue",builder.isTemplate());
        this.insertionTimestamp= Required.notNull(builder.insertionTimestamp,"insertionTimestamp",builder.isTemplate());
        this.side= Required.notNull(builder.side,"side",builder.isTemplate());
        this.noOfItemsToMatch= Required.notNull(builder.noOfItemsToMatch,"noOfItemsToMatch",builder.isTemplate());
        this.allItemsMatched= Required.notNull(builder.allItemsMatched,"allItemsMatched",builder.isTemplate());

    }

    @Override
    @SpaceId(autoGenerate = true)
    public String getId() {
        return id;
    }

    private void setId(String id){
        this.id=id;
    }

    public String getSsn(){
        return ssn;
    }

    private void setSsn(String ssn){
        this.ssn=ssn;
    }
    public BigDecimal getAmount(){
        return amount;
    }

    private void setAmount(BigDecimal amount){
        this.amount=amount;
    }

    @SpaceRouting
    public String getInstrument(){
        return  instrument;
    }

    private void setInstrument(String instrument){
        this.instrument=instrument;
    }

    public Money getMinMaxValue(){
        return minMaxValue;
    }

    private void setMinMaxValue(Money minMaxValue){
        this.minMaxValue=minMaxValue;
    }

    public Instant getInsertionTimestamp(){
        return insertionTimestamp;
    }

    private void setInsertionTimestamp(Instant insertionTimestamp){
        this.insertionTimestamp=insertionTimestamp;
    }
    public Side getSide(){
        return side;
    }

    private void setSide(Side side){
        this.side =side;
    }

    public Integer getNoOfItemsToMatch(){
        return noOfItemsToMatch;
    }

    private void setNoOfItemsToMatch(Integer noOfItemsToMatch){
        this.noOfItemsToMatch=noOfItemsToMatch;
    }

    public Boolean getAllItemsMatched(){
        return allItemsMatched;
    }

    private void setAllItemsMatched(Boolean allItemsMatched){
        this.allItemsMatched=allItemsMatched;
    }

    public static Builder builder(){
        return new Builder(false);
    }

    public static Builder templateBuilder(){
        return new Builder(true);
    }

    public static class Builder extends AbstractEntityBuilder<OrderEntity>{

        private String id;
        private String ssn;
        private BigDecimal amount;
        private String instrument;
        private Money minMaxValue;
        private Instant insertionTimestamp;
        private Side side;
        private Integer noOfItemsToMatch;
        private Boolean allItemsMatched;

        public Builder(boolean template){
            super(template);
        }

        public OrderEntity.Builder withId(String id){
            this.id=id;
            return this;
        }

        public OrderEntity.Builder withSsn(String ssn){
            this.ssn=ssn;
            return this;
        }

        public OrderEntity.Builder withAmount(BigDecimal amount){
            this.amount=amount;
            return this;
        }

        public OrderEntity.Builder withInstrument(String instrument){
            this.instrument=instrument;
            return this;
        }

        public OrderEntity.Builder withSide(Side side){
            this.side=side;
            return this;
        }

        public OrderEntity.Builder withInsertionTimestamp(Instant insertionTimestamp){
            this.insertionTimestamp=insertionTimestamp;
            return this;
        }

        public OrderEntity.Builder withMinMaxValue(Money minMaxValue){
            this.minMaxValue=minMaxValue;
            return this;
        }

        public OrderEntity.Builder withNoOfItemsToMatch(Integer noOfItemsToMatch){
            this.noOfItemsToMatch=noOfItemsToMatch;
            return this;
        }

        public OrderEntity.Builder withAllItemsMatched(Boolean allItemsMatched){
            this.allItemsMatched=allItemsMatched;
            return this;
        }

        @Override
        public OrderEntity build(){
            return new OrderEntity(this);
        }
    }

}
